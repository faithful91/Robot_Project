package com.example.test2;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.UUID;
 
import com.example.test2.R;
 
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;
 
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
 
public class MainActivity extends Activity   {
	TextView   tvX;
	  TextView   tvY;
	  TextView   tvZ;

	private float mLastX, mLastY, mLastZ;
	private boolean mInitialized;
	private SensorManager mSensorManager;
    private Sensor mAccelerometer;
    private final float NOISE = (float) 2.0;
  TextView out;
  private static final int REQUEST_ENABLE_BT = 1;
  private BluetoothAdapter btAdapter = null;
  private BluetoothSocket btSocket = null;
  private OutputStream outStream = null;
	private static DataOutputStream btout;
	 EditText textOut;
	 BufferedWriter outi;
	 	TextView textIn;
  // Well known SPP UUID
  private static final UUID MY_UUID =
      UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");
 
  // Insert your server's MAC address
  private static String address = "10:40:F3:F0:2E:A5";
 
  /** Called when the activity is first created. */
  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    mInitialized = false;
    
    out = (TextView) findViewById(R.id.out);
    textOut = (EditText)findViewById(R.id.textout1);
    Button buttonSend = (Button)findViewById(R.id.send);
    textIn = (TextView)findViewById(R.id.textin);
    out.append("\n...In onCreate()...");
 
    btAdapter = BluetoothAdapter.getDefaultAdapter();
    CheckBTState();
    buttonSend.setOnClickListener(buttonSendOnClickListener);

  }
 
  
  Button.OnClickListener buttonSendOnClickListener
  = new Button.OnClickListener(){

		@Override
		public void onClick(View arg0) {
			// TODO Auto-generated method stub
			Socket s = null;
			
			
			try {
			    BluetoothDevice device = btAdapter.getRemoteDevice(address);
			    try {
				      btSocket = device.createRfcommSocketToServiceRecord(MY_UUID);

				    } catch (IOException e) {
				      AlertBox("Fatal Error", "In onResume() and socket create failed: " + e.getMessage() + ".");
				    }
			    
			    try {
				      btSocket.connect();
				      out.append("\n...Connection established and data link opened...");
				    
				      } catch (IOException e2) {
				        AlertBox("Fatal Error", "In onResume() and unable to close socket during connection failure" + e2.getMessage() + ".");
				      }
 		 outi = new BufferedWriter(new OutputStreamWriter(btSocket.getOutputStream()));

 				outi.write(textOut.getText().toString());
 				
 				
 			      

			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
				
				
				
				
				
				
			
		}};
  
  
  @Override
  public void onStart() {
    super.onStart();
    out.append("\n...In onStart()...");
  }
 public void onResume(){
	    super.onResume();

	 
	 out.append("\n...In onResume...\n...Attempting client connect...");
	 
	
	    
	      
	 
	    // Create a data stream so we can talk to server.
	    out.append("\n...Sending message to server...");
	 
 }
 
 
  @Override
  public void onPause() {
    super.onPause();
 
    out.append("\n...In onPause()...");
 
    if (outStream != null) {
      try {
        outi.flush();
      } catch (IOException e) {
        AlertBox("Fatal Error", "In onPause() and failed to flush output stream: " + e.getMessage() + ".");
      }
    }
 
    try     {
      btSocket.close();
    } catch (IOException e2) {
      AlertBox("Fatal Error", "In onPause() and failed to close socket." + e2.getMessage() + ".");
    }
  }
 
  @Override
  public void onStop() {
    super.onStop();
    out.append("\n...In onStop()...");
  }
 
  @Override
  public void onDestroy() {
    super.onDestroy();
    out.append("\n...In onDestroy()...");
  }
   
  private void CheckBTState() {
    // Check for Bluetooth support and then check to make sure it is turned on
 
    // Emulator doesn't support Bluetooth and will return null
    if(btAdapter==null) { 
      AlertBox("Fatal Error", "Bluetooth Not supported. Aborting.");
    } else {
      if (btAdapter.isEnabled()) {
        out.append("\n...Bluetooth is enabled...");
      } else {
        //Prompt user to turn on Bluetooth
        Intent enableBtIntent = new Intent(btAdapter.ACTION_REQUEST_ENABLE);
        startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
      }
    }
  }
   
  public void AlertBox( String title, String message ){
    new AlertDialog.Builder(this)
    .setTitle( title )
    .setMessage( message + " Press OK to exit." )
    .setPositiveButton("OK", new OnClickListener() {
        public void onClick(DialogInterface arg0, int arg1) {
          finish();
        }
    }).show();
  }
  
  
  public void onAccuracyChanged(Sensor sensor, int accuracy) {
		// can be safely ignored for this demo
	}

	
}